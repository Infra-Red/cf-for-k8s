#@ load("@ytt:assert", "assert")
#@ load("@ytt:data", "data")
#@ load("@ytt:library", "library")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:base64", "base64")

#@ def capi_host():
#@   if len(data.values.capi.database.host) > 0:
#@     return data.values.capi.database.host
#@   else:
#@     return "cf-db-postgresql.cf-db.svc.cluster.local"
#@   end
#@ end

#@ def capi_values():
system_namespace: #@ data.values.system_namespace
workloads_namespace: #@ data.values.workloads_namespace
staging_namespace: #@ data.values.staging_namespace
system_domain: #@ data.values.system_domain
app_domains:
#@ for/end domain in data.values.app_domains:
#@overlay/append
- #@ domain

blobstore:
  endpoint: "http://cf-blobstore-minio.cf-blobstore.svc.cluster.local:9000"
  region: "''"
  access_key_id: "admin"
  secret_access_key_secret_name: capi-blobstore-secret-key
  package_directory_key: cc-packages
  droplet_directory_key: cc-droplets
  resource_directory_key: cc-resources
  buildpack_directory_key: cc-buildpacks

ccdb:
  adapter: #@ data.values.capi.database.adapter
  host: #@ capi_host()
  port: #@ data.values.capi.database.port
  user: #@ data.values.capi.database.user
  password_secret_name: capi-database-password
  database: #@ data.values.capi.database.name
  ca_cert: #@ data.values.capi.database.ca_cert

eirini:
  serverCerts:
    secretName: eirini-internal-tls-certs

apiServer:
  opi:
    client_cert: #@ data.values.internal_certificate.crt
    client_key: #@ data.values.internal_certificate.key
    ca: #@ data.values.internal_certificate.ca

metric_proxy:
  ca:
    secret_name: #@ data.values.metric_proxy.ca.secret_name
  cert:
    secret_name: #@ data.values.metric_proxy.cert.secret_name

uaa:
  serverCerts:
    secretName: uaa-certs
  clients:
    cloud_controller_username_lookup:
      secret_name: cloud-controller-username-lookup-client-secret
    cf_api_controllers:
      secret_name: cf-api-controllers-client-secret

kpack:
  registry:
    hostname: #@ data.values.app_registry.hostname
    repository_prefix: #@ data.values.app_registry.repository_prefix
    username: #@ data.values.app_registry.username
    password: #@ data.values.app_registry.password
#@ end

#@ capi = library.get("capi-k8s-release")
--- #@ template.replace(capi.with_data_values(capi_values()).eval())

#! expose CAPI under the system domain
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: cf-api-external-virtual-service
  namespace: #@ data.values.system_namespace
spec:
  hosts:
  - #@ "api." + data.values.system_domain
  gateways:
  - #@ data.values.system_namespace + "/istio-ingressgateway"
  http:
  - route:
    - destination:
        host: #@ "capi." + data.values.system_namespace + ".svc.cluster.local"
        port:
          number: 80

---
apiVersion: v1
kind: Secret
metadata:
  name: capi-database-password
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.capi.database.password
---
apiVersion: v1
kind: Secret
metadata:
  name: capi-blobstore-secret-key
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.cf_blobstore.secret_key
---
apiVersion: v1
kind: Secret
metadata:
  name: cf-api-controllers-client-secret
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.capi.cf_api_controllers_client_secret
---
apiVersion: v1
kind: Secret
metadata:
  name: cloud-controller-username-lookup-client-secret
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.capi.cc_username_lookup_client_secret
---
apiVersion: v1
kind: Secret
metadata:
  name: capi-database-encryption-key-secret
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.capi.database.encryption_key

#@ def cfdb_enabled():
#@   return len(data.values.uaa.database.host) == 0 or len(data.values.capi.database.host) == 0
#@ end

#@ if cfdb_enabled():
#@overlay/match by=overlay.subset({"kind": "ConfigMap", "metadata":{"name":"cf-db-postgresql-init-scripts"}}),expects="0+"
---
#@ ccdb = data.values.capi.database
#@yaml/text-templated-strings
data:
  #@overlay/match missing_ok=True
  ccdb_init.sh: |
    #!/bin/bash
    CCDB_USERNAME=$(cat /docker-entrypoint-initdb.d/secret/ccdb-username)
    CCDB_PASSWORD=$(cat /docker-entrypoint-initdb.d/secret/ccdb-password)
    cat > /tmp/setup_db.sql <<EOT
    CREATE DATABASE (@= ccdb.name @);
    CREATE ROLE ${CCDB_USERNAME} LOGIN PASSWORD '${CCDB_PASSWORD}';
    EOT
    psql -U postgres -f /tmp/setup_db.sql
    psql -U postgres -d (@= ccdb.name @) -c "CREATE EXTENSION citext"

#@overlay/match by=overlay.subset({"kind": "Secret", "metadata":{"name":"cf-db-credentials"}}),expects="0+"
---
#@overlay/match missing_ok=True
data:
  #@ if len(data.values.capi.database.user) == 0:
  #@  assert.fail("capi.database.user cannot be empty")
  #@ end
  #@overlay/match missing_ok=True
  ccdb-username: #@ base64.encode(data.values.capi.database.user)
  #@ if len(data.values.capi.database.password) == 0:
  #@  assert.fail("capi.database.password cannot be empty")
  #@ end
  #@overlay/match missing_ok=True
  ccdb-password: #@ base64.encode(data.values.capi.database.password)

#@ end